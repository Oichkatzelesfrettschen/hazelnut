# -*- mode: Makefile; -*-
######################################################################
## Central Makeconf file
## Copyright (C) 1999-2025, Karlsruhe University (refactored)
######################################################################

# 1. Locate root and include local overrides
TOPDIR := $(dir $(word 1,$(wildcard Makeconf $(addsuffix /Makeconf, .. ../.. ../../..) )))
-include $(TOPDIR)Makeconf.local

# 2. Auto-detect PLATFORM if not set
UNAME_M := $(shell uname -m)
ifndef PLATFORM
  ifeq ($(UNAME_M),x86_64)
    PLATFORM := x86_64
  else ifeq ($(filter i?86,$(UNAME_M)),)
    PLATFORM := $(UNAME_M)
  else ifeq ($(filter arm%,$(UNAME_M)),)
    PLATFORM := $(UNAME_M)
  else ifeq ($(UNAME_M),mips)
    PLATFORM := r4000
  else
    $(error Unknown host architecture "$(UNAME_M)")
  endif
endif

# 3. Map PLATFORM â†’ ARCH
ifeq ($(filter x86_64,$(PLATFORM)),x86_64)
  ARCH := x86_64
else ifeq ($(filter i?86,$(PLATFORM)),)
  ARCH := x86
else ifeq ($(filter arm%,$(PLATFORM)),)
  ARCH := arm
else ifeq ($(filter r4000,$(PLATFORM)),)
  ARCH := mips
else
  $(error Cannot infer ARCH for PLATFORM=$(PLATFORM))
endif

# 4. Common tool definitions
SHELL   := /usr/bin/env bash
RM      := rm -f
LN_S    := ln -s
CC      := $(PREFIX)gcc
DEPCC   := gcc
LD      := $(PREFIX)ld
OBJCOPY := $(PREFIX)objcopy
OBJDUMP := $(PREFIX)objdump
STRIP   := $(PREFIX)strip
AR      := $(PREFIX)ar
NM      := $(PREFIX)nm

# 5. Include and define dirs
LIBGCCINC := $(dir $(shell $(CC) --print-lib))include
INCLUDES  := $(TOPDIR)include $(LIBGCCINC)
DEFINES   := __ARCH__=$(ARCH) __PLATFORM__=$(PLATFORM)
CPPFLAGS := -nostdinc $(addprefix -I,$(INCLUDES)) $(addprefix -D,$(DEFINES))

# 6. ARCH-specific flags
ifeq ($(ARCH),x86)
  CFLAGS  := -m32 -march=i386 -Wall -Wno-format -O2 -fomit-frame-pointer -freg-struct-return
  LDFLAGS := -m elf_i386 -N -Tlinker/$(ARCH).lds
  PREFIX  := i386-linux-
endif

ifeq ($(ARCH),x86_64)
  CFLAGS  := -m64 -march=x86-64 -Wall -Wno-format -O2 -fomit-frame-pointer -freg-struct-return
  LDFLAGS := -m elf_x86_64 -N -Tlinker/$(ARCH).lds
  PREFIX  := x86_64-linux-
endif

ifeq ($(ARCH),arm)
  # Map specific ARM CPU models
  ifeq ($(filter dnard,$(PLATFORM)),dnard)
    CPU := strongarm110
  else ifeq ($(filter ep7211,$(PLATFORM)),ep7211)
    CPU := arm7tdmi
  else
    CPU := strongarm1100
  endif
  CFLAGS  := -mcpu=$(CPU) -Wall -Wno-format -O2 -fomit-frame-pointer
  LDFLAGS := -Tlinker/$(PLATFORM).lds -N -Tlinker/$(ARCH).lds
  PREFIX  := arm-unknown-linux-gnu-
  CPPFLAGS += -D__CPU__=$(CPU) -DEXCEPTION_VECTOR_RELOCATED
endif

ifeq ($(ARCH),mips)
  CFLAGS  := -Wall -Wno-format -O2 -fomit-frame-pointer -mcpu=r4000 -G 0 -mno-abicalls -fno-pic -mips3 -mgp32
  SFLAGS  := -mips3
  LDFLAGS := -N -Tlinker/$(ARCH).lds
  PREFIX  := mips-linux-
endif

# 7. Final CPPFLAGS/CFLAGS adjustments
CPPFLAGS += -U$(ARCH) -U$(PLATFORM) -x c++ -funsigned-char -funsigned-bitfields -fno-exceptions
ifeq ($(findstring -fomit-frame-pointer,$(CFLAGS)), -fomit-frame-pointer)
  DEFINES += NO_FRAME_POINTER
endif

# 8. Basic rules
.DEFAULT_GOAL := all

%.o: %.S
	$(CC) $(CPPFLAGS) $(SFLAGS) -c $< -o $@

%.o: %.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# 9. Libraries and linking
LIB_OBJ := $(patsubst %.S,%.o,$(patsubst %.c,%.o,$(LIB_SRC)))
$(LIB): $(LIB_OBJ) Makefile
	$(AR) -rcs $@ $(LIB_OBJ)

OBJ := $(patsubst %.S,%.o,$(patsubst %.c,%.o,$(OBJ_SRC)))

# 10. Dependencies
.depend: $(OBJ_SRC) $(LIB_SRC) Makefile
	@echo "Building dependencies in `pwd`"
	@$(DEPCC) $(CPPFLAGS) -M $(OBJ_SRC) $(LIB_SRC) > $@

# 11. Cleanup
.PHONY: clean distclean
clean:
	$(RM) *~ *.o *.i *.ii *.stripped $(LIB)
distclean: clean
	$(RM) .depend